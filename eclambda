import json
import requests

def lambda_handler(event, context):
    # Replace with your EC2 instance's public DNS or IP
    ec2_url = "http://<your-ec2-public-dns-or-ip>"
    
    try:
        # Send HTTP GET request to EC2 instance on port 80
        response = requests.get(ec2_url)
        
        # Print the response from EC2
        print("Response Status Code:", response.status_code)
        print("Response Text:", response.text)
        
        # Return the response
        return {
            'statusCode': response.status_code,
            'body': response.text
        }
        
    except requests.exceptions.RequestException as e:
        # Handle any errors that occur during the request
        print("Error occurred:", str(e))
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }







----
import boto3

# Initialize boto3 clients
ec2_client = boto3.client('ec2')

# Specify your AMI ID, instance type, and other configurations
AMI_ID = 'ami-xxxxxxxx'  # Replace with your AMI ID
INSTANCE_TYPE = 't2.micro'  # Replace with the desired instance type
KEY_NAME = 'your-key-pair'  # Replace with your key pair name (if needed)
SECURITY_GROUP_ID = 'sg-xxxxxxxx'  # Replace with your security group ID
INSTANCE_ID = None  # Placeholder for instance ID

def create_instance():
    """Create an EC2 instance."""
    response = ec2_client.run_instances(
        ImageId=AMI_ID,
        InstanceType=INSTANCE_TYPE,
        KeyName=KEY_NAME,
        SecurityGroupIds=[SECURITY_GROUP_ID],
        MinCount=1,
        MaxCount=1
    )
    instance_id = response['Instances'][0]['InstanceId']
    print(f"Created instance {instance_id}")
    return instance_id

def terminate_instance(instance_id):
    """Terminate an EC2 instance."""
    response = ec2_client.terminate_instances(InstanceIds=[instance_id])
    print(f"Terminated instance {instance_id}")
    return response

def lambda_handler(event, context):
    action = event.get('action', '').lower()
    instance_id = event.get('instance_id', '')

    if action == 'create':
        # Step 1: Create the EC2 instance
        instance_id = create_instance()
        
        # Step 2: Wait for the instance to be in a running state
        print("Waiting for instance to be running...")
        ec2_client.get_waiter('instance_running').wait(InstanceIds=[instance_id])
        
        return {
            'statusCode': 200,
            'body': f"Instance {instance_id} created and is running."
        }
    
    elif action == 'terminate':
        if instance_id:
            # Terminate the specified EC2 instance
            terminate_instance(instance_id)
            return {
                'statusCode': 200,
                'body': f"Instance {instance_id} terminated."
            }
        else:
            return {
                'statusCode': 400,
                'body': "Error: 'instance_id' is required for termination."
            }
    
    else:
        return {
            'statusCode': 400,
            'body': "Error: Invalid action. Use 'create' or 'terminate'."
        }
