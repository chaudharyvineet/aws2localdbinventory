import requests
import time
from requests.auth import HTTPBasicAuth

# Jenkins configuration
JENKINS_URL = 'http://your-jenkins-url:8080'  # Replace with your Jenkins URL
JENKINS_USER = 'your-jenkins-username'        # Replace with your Jenkins username
JENKINS_API_TOKEN = 'your-jenkins-api-token'  # Replace with your Jenkins API token
JOB_NAME = 'your-job-name'                    # Replace with your Jenkins job name

def trigger_jenkins_build():
    # URL to trigger the Jenkins job
    trigger_url = f'{JENKINS_URL}/job/{JOB_NAME}/build/api/json'
    
    # Trigger the build
    response = requests.post(trigger_url, auth=HTTPBasicAuth(JENKINS_USER, JENKINS_API_TOKEN))

    if response.status_code == 201:
        print('Build triggered successfully.')
        # Extract build number from the response headers
        build_number = response.headers.get('Location').split('/')[-2]
        print(f'Build number: {build_number}')
        return build_number
    else:
        print(f'Failed to trigger build. Status code: {response.status_code}')
        return None

def show_build_logs(build_number):
    console_url = f'{JENKINS_URL}/job/{JOB_NAME}/{build_number}/consoleText'
    response = requests.get(console_url, auth=HTTPBasicAuth(JENKINS_USER, JENKINS_API_TOKEN))

    if response.status_code == 200:
        print(response.text)
    else:
        print(f'Error fetching build logs. Status code: {response.status_code}')

def wait_for_build_to_complete(build_number):
    build_url = f'{JENKINS_URL}/job/{JOB_NAME}/{build_number}/api/json'
    
    while True:
        response = requests.get(build_url, auth=HTTPBasicAuth(JENKINS_USER, JENKINS_API_TOKEN))

        if response.status_code == 200:
            build_data = response.json()
            
            if build_data['building']:
                print(f'Build {build_number} is still running...')
                time.sleep(10)  # Wait before polling again
            else:
                # Build has completed
                if build_data['result'] == 'SUCCESS':
                    print(f'Build {build_number} completed successfully.')
                else:
                    print(f'Build {build_number} failed with result: {build_data["result"]}')
                break
        else:
            print(f'Error checking build status. Status code: {response.status_code}')
            break

def main():
    # Trigger Jenkins build
    build_number = trigger_jenkins_build()

    if build_number:
        # Wait for the build to complete
        wait_for_build_to_complete(build_number)
        
        # Show the build logs
        show_build_logs(build_number)

if __name__ == '__main__':
    main()
